
#include <iostream>
#include <string>
using namespace std;
//int n;
//int k = 1;
//int i = 2;
//int pressF(int i, int n, int k) {
//	if (1 == n) {
//		return 0;
//	}
//	else if (n) {
//		return 0;
//	}
//	else if (i < n and i != n) {
//		pressF(i * 2, n, k + 1);
//	}
//	else if (i == n) {
//		return k;
//	}
//	else return 99;
//}
//int main()
//{
//	cin >> n;
//	cout<<pressF(i,n,k);
//}
int n;
struct Tree
{
	int i=NULL;
	int w=NULL;
	struct Tree* left=NULL, * right=NULL;

};
Tree* addLeaf(int i, int w, struct Tree *leaf) {
	if (leaf == NULL) {
		leaf = new Tree;//выделяем память для нового персон
		leaf->i = i;
		leaf->w = w;
		leaf->left = NULL;
		leaf->right = NULL;
	}
	else {
		if (i < leaf->i) {
			leaf->left = addLeaf(i, w, leaf->left);
		}
		else {
			leaf->right = addLeaf(i, w, leaf->right);
		}
	}
	return leaf;
};
void treePrint(Tree* leaf) {
	if (leaf != NULL) {
		cout << leaf->i << " " << leaf->w << endl;
		treePrint(leaf->left);//Рекурсивная функция для левого поддерева
		treePrint(leaf->right);//Рекурсивная функция для правого поддерева
	}
}

int main() {
	cin >> n;
	struct Tree* my=NULL;
	my = addLeaf(16, "Rita",my);
	my = addLeaf(51, "Marina", my);
	my = addLeaf(55, "Kirill", my);
	treePrint(my);
	struct Tree* i = NULL;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			i = addLeaf(i, 55, j);
		}
	}
}
